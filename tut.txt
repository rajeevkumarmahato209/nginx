before running docker-compose -f docker-compose-cli.yaml up   -d --- > docker-compose -f docker-compose-cli.yaml up   -d

check docker and docker-compose installed or not
check jq installed or not
check golang installed or not


export ORDERER_CA=/opt/gopath/fabric-samples/burakcan-network/crypto-config/ordererOrganizations/burakcan-network.com/orderers/orderer.burakcan-network.com/msp/cacerts/ca.burakcan-network.com-cert.pem
export TLS_CA=/opt/gopath/fabric-samples/burakcan-network/crypto-config/ordererOrganizations/burakcan-network.com/orderers/orderer.burakcan-network.com/msp/tlscacerts/tlsca.burakcan-network.com-cert.pem

peer channel create -o orderer.burakcan-network.com:7050 -c channeldemo -f /opt/gopath/fabric-samples/burakcan-network/channel-artifacts/channel.tx --tls --cafile $ORDERER_CA













Payer type struct {
	PayerID string,
	Limit float64,
	Status string
}

func (s *SmartContract) SetPayerLimit(ctx contractapi.TransactionContextInterface, payerID string, limit float64) error {

	if payerID == nil {
		return fmt.Errorf("Payer ID should not be empty %s", payerID)
	}

	if limit <= 0 {
		return fmt.Errorf("Limit amount is invalid %s", limit)
	}

	payer := Payer {
		PayerID: payerID,
		Limit: limit
	}

	payerJSON, err := json.Marshal(payer)
	if err != nil {
		return err
	}

	err := ctx.GetStub().PutState(payerID, payerJSON)
	if err != nil {
		return err
	}

	return nil
}

func (s *SmartContract) AuthoseLimit(ctx contractapi.TransactionContextInterface, payerID string, paymentAmount float64) error {

	if payerID == nil {
		return fmt.Errorf("Payer ID should not be empty %s", payerID)
	}

	payerJSON, err := ctx.GetStub().GetState(payerID)

	if err != nil {
		return fmt.Errorf("failed to read from world state: %v", err)
	}
	if payerJSON == nil {
		return fmt.Errorf("the asset %s does not exist", payerID)
	}

	var payer Payer
	err = json.Unmarshal(payerJSON, &payer)
	if err != nil {
		return err
	}

	if paymentAmount > payer.Limit {
		payer.Status = "Unauthorised"
	}

	payer.Status = "Authorised"

	payerUpdatedJSON, err := json.Marshal(payer)
	if err != nil {
		return err
	}

	err := ctx.GetStub().PutState(payerID, payerUpdatedJSON)
	if err != nil {
		return err
	}

	return nil

}

func (s *SmartContract) GetStatus(ctx contractapi.TransactionContextInterface, payerID string) string, error {

	if payerID == nil {
		return nil, fmt.Errorf("Payer ID should not be empty %s", payerID)
	}

	payerJSON, err := ctx.GetStub().GetState(payerID)

	if err != nil {
		return nil, fmt.Errorf("failed to read from world state: %v", err)
	}
	if payerJSON == nil {
		return nil, fmt.Errorf("the asset %s does not exist", payerID)
	}

	var payer Payer
	err = json.Unmarshal(payerJSON, &payer)
	if err != nil {
		return nil, err
	}

	return payer.Status, nil

}









