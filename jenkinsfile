pipeline {
    agent any 

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from version control
                git 'https://github.com/your-repo.git'
            }
        }
        stage('Build') {
            steps {
                // Build the application
                sh './build.sh' // Replace with your build command
            }
        }
        stage('Test') {
            steps {
                // Run tests
                sh './run_tests.sh' // Replace with your test command
            }
        }
        stage('Deploy') {
            steps {
                // Deploy the application
                sh './deploy.sh' // Replace with your deployment command
            }
        }
    }
    
    post {
        always {
            // Actions to always perform after the pipeline finishes
            echo 'Cleaning up...'
        }
        success {
            // Actions to perform on successful completion
            echo 'Pipeline succeeded!'
        }
        failure {
            // Actions to perform on failure
            echo 'Pipeline failed!'
        }
    }
}





Docker Image Build
------------------------
pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'my_image:latest' // Define your Docker image name
        DOCKERFILE_PATH = '.' // Path to your Dockerfile
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Checkout the code from your repository
                git 'https://github.com/your-repo/your-project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    def customImage = docker.build(DOCKER_IMAGE, "-f ${DOCKERFILE_PATH}/Dockerfile .")
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Optionally run tests on the Docker image
                    docker.image(DOCKER_IMAGE).inside {
                        sh 'run-your-tests-command' // Replace with your test command
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub (or your Docker registry)
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials-id') {
                        docker.image(DOCKER_IMAGE).push()
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images if needed
            sh 'docker rmi ${DOCKER_IMAGE} || true'
        }
        success {
            echo 'Build and push successful!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}

















#!groovy

pipeline {
  agent none
  stages {
    stage('Maven Install') {
      agent {
        docker {
          image 'maven:3.5.0'
        }
      }
      steps {
        sh 'mvn clean install'
      }
    }
    stage('Docker Build') {
      agent any
      steps {
        sh 'docker build -t shanem/spring-petclinic:latest .'
      }
    }
    stage('Docker Push') {
      agent any
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
          sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
          sh 'docker push shanem/spring-petclinic:latest'
        }
      }
    }
  }
}
